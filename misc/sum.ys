
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Sample linked list
.align 8
ele1:
		.long 0x00a
		.long ele2
ele2:
		.long 0x0b0
		.long ele3
ele3:
		.long 0xc00
		.long 0

Main:	pushl %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%edx
	pushl %edx      	# Push ele1
	call sum_list	    # sum_list(ele1)	
	rrmovl %ebp,%esp
	popl %ebp
	ret 

sum_list:	pushl %ebp
	rrmovl %esp,%ebp
	mrmovl 8(%ebp),%edx	# edx = ele1
	xorl %eax,%eax		# sum = 0
	andl   %edx,%edx	# Stop when 0
	je     End
Loop:	mrmovl (%edx),%esi	# get *Start
	addl %esi,%eax          # add to sum
	irmovl $4,%ebx          # 
	addl %ebx,%edx          # Start++
	mrmovl (%edx),%esi
	rrmovl %esi, %edx
	andl	%edx, %edx
	jne    Loop             # Stop when 0
End:	rrmovl %ebp,%esp
	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 


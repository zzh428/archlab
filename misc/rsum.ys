# 软件61 赵哲晖 2016013224

# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Sample linked list
.align 8
ele1:
		.long 0x00a
		.long ele2
ele2:
		.long 0x0b0
		.long ele3
ele3:
		.long 0xc00
		.long 0

Main:	pushl %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%edx
	pushl %edx          # Push ele1
	xorl %eax,%eax		# sum = 0      	
	call rsum_list		# rsum_list(ele1)
	rrmovl %ebp,%esp
	popl %ebp
	ret 

rsum_list:	pushl %ebp
	rrmovl %esp,%ebp
	mrmovl 8(%ebp),%edx	# edx = ele1
	andl   %edx,%edx	# Stop when 0
	je     End
Loop:	mrmovl (%edx),%esi	# get *ele
	pushl %esi              # push *ele
	irmovl $4,%ebx          
	addl %ebx,%edx          # ele++
	mrmovl (%edx),%esi
	rrmovl %esi, %edx       # get next ele
	pushl %edx
	call rsum_list          # rsum_list(next)
	popl %edx
	popl %esi
	addl %esi,%eax          # add to sum

End:	rrmovl %ebp,%esp
	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 

